"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAll = exports.deleteOne = exports.updateMany = exports.updateOneByQuery = exports.updateOneById = exports.count = exports.getPaging = exports.findByPipeline = exports.findByQuery = exports.findById = exports.create = exports.aggregate = exports.withTransaction = void 0;
const tslib_1 = require("tslib");
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const base_response_1 = require("../error/base.response");
///TRANSACTION
async function withTransaction(callback) {
    try {
        let result;
        const session = await mongoose_1.default.startSession();
        await session.withTransaction(async () => {
            result = await callback(session);
        });
        await session.endSession();
        return result;
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.withTransaction = withTransaction;
///AGGREGATE
async function aggregate(model, pipeline) {
    try {
        return await model.aggregate(pipeline);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.aggregate = aggregate;
///CREATE
async function create(model, data, options) {
    try {
        return (await model.create([data], options)).shift(); //shu joyda shift return yoq ed
    }
    catch (e) {
        console.log(e);
        throw e;
    }
}
exports.create = create;
///FIND BY ID
async function findById(model, _id, project = {}, options) {
    try {
        const query = { _id, isDeleted: false };
        const projection = { __v: 0, isDeleted: 0, ...project };
        return await model.findOne(query, projection, options);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.findById = findById;
///FIND BY QUERY
async function findByQuery(model, query, project = {}, options) {
    try {
        const projection = { __v: 0, isDeleted: 0, ...project };
        return await model.findOne(query, projection, options);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.findByQuery = findByQuery;
///FIND BY PIPELINE
async function findByPipeline(model, _id, pipeline = [], options) {
    try {
        const baseQuery = {
            isDeleted: false,
            _id,
        };
        const $match = {
            $match: baseQuery
        };
        const $pipeline = [$match, ...pipeline];
        const data = await model.aggregate($pipeline, options);
        return data[0];
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.findByPipeline = findByPipeline;
///FIND BY PAGING
async function getPaging(model, dto, query, sort, pipeline = []) {
    try {
        const baseQuery = {
            isDeleted: false,
            ...query
        };
        const $match = {
            $match: baseQuery
        };
        let $sort = {
            $sort: {
                _id: 1
            }
        };
        if (sort) {
            $sort.$sort = sort;
        }
        const { page, limit } = dto;
        const total = await model.countDocuments(baseQuery);
        const $pipeline = [$match, $sort, ...pipeline];
        const data = await model
            .aggregate($pipeline)
            .skip(limit * (page - 1))
            .limit(limit)
            .project({ __v: 0, isDeleted: 0 });
        return {
            total,
            data
        };
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.getPaging = getPaging;
///COUNT
async function count(model, query) {
    try {
        const baseQuery = {
            isDeleted: false,
            ...query,
        };
        return await model.countDocuments(baseQuery);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.count = count;
///UPDATE ONE BY ID
async function updateOneById(model, _id, data, options) {
    try {
        return await model.updateOne({ _id }, data, options);
    }
    catch (e) {
        console.log(e);
        throw e;
    }
}
exports.updateOneById = updateOneById;
///UPDATE ONE BY QUERY
async function updateOneByQuery(model, query, data, options) {
    try {
        await model.findOneAndUpdate(query, data, { ...options, new: true });
        return;
    }
    catch (e) {
        console.log(e);
        throw e;
    }
}
exports.updateOneByQuery = updateOneByQuery;
///UPDATE MANY BY QUERY
async function updateMany(model, query, data, options) {
    try {
        await model.updateMany(query, data, options);
        return;
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.updateMany = updateMany;
///DELETE
async function deleteOne(model, query) {
    try {
        return await model.deleteOne(query);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.deleteOne = deleteOne;
///GET ALL /* custom */
async function getAll(model, project = {}) {
    try {
        const query = { isDeleted: false };
        const projection = { __v: 0, isDeleted: 0, ...project };
        return await model.find(query, projection);
    }
    catch (e) {
        console.log(e);
        throw base_response_1.BaseResponse.UnknownError(e);
    }
}
exports.getAll = getAll;
//# sourceMappingURL=data:application/json;base64,